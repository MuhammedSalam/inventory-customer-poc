// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { CompleteLease } from "./completeLease";
import * as log from "./log";
/**
 * Describes the lease used with an Azure Blob for storing the checkpoint information.
 */
export class AzureBlobLease extends CompleteLease {
    constructor(info) {
        super(info);
        this.offset = info.offset;
        this.sequenceNumber = info.sequenceNumber != undefined ? info.sequenceNumber : 0;
        this.token = info.token || "";
        this.blob = info.blob;
    }
    /**
     * Gets the lease information.
     * @returns {LeaseInfo} LeaseInfo.
     */
    getInfo() {
        const info = super.getInfo();
        info.sequenceNumber = this.sequenceNumber;
        info.token = this.token;
        info.offset = this.offset;
        log.azurebloblease("[%s] [%s] Lease info is: %o", this.owner, this.partitionId, info);
        return info;
    }
    /**
     * Serializes the lease information.
     * @returns {string} string The serialized lease info.
     */
    serialize() {
        return JSON.stringify(this.getInfo());
    }
    /**
     * Creates a Lease for the given partitionId.
     * @param {string} id The partitionId for which the lease needs to be created.
     * @param {AzureBlob} blob The azure blob reference
     * @returns {CompleteLease} Lease.
     */
    static createFromPartitionId(id, blob) {
        return new AzureBlobLease({
            partitionId: id,
            epoch: -1,
            sequenceNumber: 0,
            owner: "",
            token: "",
            blob: blob
        });
    }
}
//# sourceMappingURL=azureBlobLease.js.map