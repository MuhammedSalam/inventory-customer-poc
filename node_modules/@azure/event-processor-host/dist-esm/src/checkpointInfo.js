// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as log from "./log";
import { validateType } from "./util/utils";
/**
 * Describes the checkoint information.
 * @namespace CheckpointInfo
 */
export var CheckpointInfo;
(function (CheckpointInfo) {
    /**
     * Creates the checkpoint info
     * @param {string} partitionId The partition id for the checkpoint
     * @param {string} [offset] The offset of the event to be checked in.
     * @param {number} [sequenceNumber] The sequence number of the event to be checked in.
     * @return {CheckpointInfo} CheckpointInfo
     */
    function create(partitionId, offset, sequenceNumber) {
        validateType("partitionId", partitionId, true, "string");
        validateType("offset", offset, false, "string");
        validateType("sequenceNumber", sequenceNumber, false, "number");
        const checkpoint = {
            partitionId: partitionId,
            offset: offset || "-1",
            sequenceNumber: sequenceNumber != undefined ? sequenceNumber : 0
        };
        log.checkpoint("The created CheckpointInfo is: %o", checkpoint);
        return checkpoint;
    }
    CheckpointInfo.create = create;
    /**
     * Creates the checkpoint info
     * @param {LeaseInfo} lease The lease info from which the checkpoint info needs to created.
     * @return {CheckpointInfo} CheckpointInfo
     */
    function createFromLease(lease) {
        validateType("lease", lease, true, "object");
        const checkpoint = {
            offset: lease.offset || "-1",
            partitionId: lease.partitionId,
            sequenceNumber: lease.sequenceNumber
        };
        log.checkpoint("The created CheckpointInfo from lease %o is: %o", lease, checkpoint);
        return checkpoint;
    }
    CheckpointInfo.createFromLease = createFromLease;
    /**
     * Creates the checkpoint info.
     * @param {string} partitionId The partition id for the checkpoint
     * @param {EventData} eventData The event data from which the checkpoint info needs to created.
     * @return {CheckpointInfo} CheckpointInfo
     */
    function createFromEventData(partitionId, eventData) {
        validateType("partitionId", partitionId, true, "string");
        validateType("eventData", eventData, true, "object");
        validateType("eventData.offset", eventData.offset, true, "string");
        validateType("eventData.sequenceNumber", eventData.sequenceNumber, true, "number");
        const checkpoint = {
            partitionId: partitionId,
            offset: eventData.offset,
            sequenceNumber: eventData.sequenceNumber
        };
        log.checkpoint("The created CheckpointInfo from EventData %o is: %o", eventData, checkpoint);
        return checkpoint;
    }
    CheckpointInfo.createFromEventData = createFromEventData;
})(CheckpointInfo || (CheckpointInfo = {}));
//# sourceMappingURL=checkpointInfo.js.map